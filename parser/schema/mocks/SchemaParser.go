// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	ast "go/ast"

	openApi3Schema "github.com/hanyue2020/go-swagger3/openApi3Schema"
	mock "github.com/stretchr/testify/mock"
)

// SchemaParser is an autogenerated mock type for the SchemaParser type
type SchemaParser struct {
	mock.Mock
}

// GetPkgAst provides a mock function with given fields: pkgPath
func (_m *SchemaParser) GetPkgAst(pkgPath string) (map[string]*ast.Package, error) {
	ret := _m.Called(pkgPath)

	var r0 map[string]*ast.Package
	if rf, ok := ret.Get(0).(func(string) map[string]*ast.Package); ok {
		r0 = rf(pkgPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*ast.Package)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pkgPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseSchemaObject provides a mock function with given fields: pkgPath, pkgName, typeName
func (_m *SchemaParser) ParseSchemaObject(pkgPath string, pkgName string, typeName string,  astExpr ast.Expr) (*openApi3Schema.SchemaObject, error) {
	ret := _m.Called(pkgPath, pkgName, typeName)

	var r0 *openApi3Schema.SchemaObject
	if rf, ok := ret.Get(0).(func(string, string, string) *openApi3Schema.SchemaObject); ok {
		r0 = rf(pkgPath, pkgName, typeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openApi3Schema.SchemaObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(pkgPath, pkgName, typeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterType provides a mock function with given fields: pkgPath, pkgName, typeName
func (_m *SchemaParser) RegisterType(pkgPath string, pkgName string, typeName string, astExpr ast.Expr) (string, error) {
	ret := _m.Called(pkgPath, pkgName, typeName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(pkgPath, pkgName, typeName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(pkgPath, pkgName, typeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
